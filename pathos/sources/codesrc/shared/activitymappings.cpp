/*
===============================================
Pathos Engine - Created by Andrew Stephen "Overfloater" Lucas

Copyright 2016
All Rights Reserved.
===============================================
*/

#include "includes.h"
#include "activity.h"

#define DEFINE_ACTIVITY( activity ) { activity, #activity }

// Define the activity map
activity_mapping_t ACTIVITYMAP[] =
{
	DEFINE_ACTIVITY(ACT_RESET),
	DEFINE_ACTIVITY(ACT_IDLE),
	DEFINE_ACTIVITY(ACT_GUARD),
	DEFINE_ACTIVITY(ACT_WALK),
	DEFINE_ACTIVITY(ACT_RUN),
	DEFINE_ACTIVITY(ACT_FLY),
	DEFINE_ACTIVITY(ACT_SWIM),
	DEFINE_ACTIVITY(ACT_HOP),
	DEFINE_ACTIVITY(ACT_LEAP),
	DEFINE_ACTIVITY(ACT_FALL),
	DEFINE_ACTIVITY(ACT_LAND),
	DEFINE_ACTIVITY(ACT_STRAFE_LEFT),
	DEFINE_ACTIVITY(ACT_STRAFE_RIGHT),
	DEFINE_ACTIVITY(ACT_ROLL_LEFT),
	DEFINE_ACTIVITY(ACT_ROLL_RIGHT),
	DEFINE_ACTIVITY(ACT_TURN_LEFT),
	DEFINE_ACTIVITY(ACT_TURN_RIGHT),
	DEFINE_ACTIVITY(ACT_CROUCH),
	DEFINE_ACTIVITY(ACT_CROUCH_IDLE),
	DEFINE_ACTIVITY(ACT_STAND),
	DEFINE_ACTIVITY(ACT_USE),
	DEFINE_ACTIVITY(ACT_SIGNAL1),
	DEFINE_ACTIVITY(ACT_SIGNAL2),
	DEFINE_ACTIVITY(ACT_SIGNAL3),
	DEFINE_ACTIVITY(ACT_TWITCH),
	DEFINE_ACTIVITY(ACT_COWER),
	DEFINE_ACTIVITY(ACT_SMALL_FLINCH),
	DEFINE_ACTIVITY(ACT_BIG_FLINCH),
	DEFINE_ACTIVITY(ACT_RANGE_ATTACK1),
	DEFINE_ACTIVITY(ACT_RANGE_ATTACK2),
	DEFINE_ACTIVITY(ACT_MELEE_ATTACK1),
	DEFINE_ACTIVITY(ACT_MELEE_ATTACK2),
	DEFINE_ACTIVITY(ACT_RELOAD),
	DEFINE_ACTIVITY(ACT_ARM),
	DEFINE_ACTIVITY(ACT_DISARM),
	DEFINE_ACTIVITY(ACT_EAT),
	DEFINE_ACTIVITY(ACT_DIESIMPLE),
	DEFINE_ACTIVITY(ACT_DIEBACKWARD),
	DEFINE_ACTIVITY(ACT_DIEFORWARD),
	DEFINE_ACTIVITY(ACT_DIEVIOLENT),
	DEFINE_ACTIVITY(ACT_UNUSED1),
	DEFINE_ACTIVITY(ACT_UNUSED2),
	DEFINE_ACTIVITY(ACT_UNUSED3),
	DEFINE_ACTIVITY(ACT_UNUSED4),
	DEFINE_ACTIVITY(ACT_SLEEP),
	DEFINE_ACTIVITY(ACT_INSPECT_FLOOR),
	DEFINE_ACTIVITY(ACT_INSPECT_WALL),
	DEFINE_ACTIVITY(ACT_IDLE_ANGRY),
	DEFINE_ACTIVITY(ACT_WALK_HURT),
	DEFINE_ACTIVITY(ACT_RUN_HURT),
	DEFINE_ACTIVITY(ACT_HOVER),
	DEFINE_ACTIVITY(ACT_GLIDE),
	DEFINE_ACTIVITY(ACT_FLY_LEFT),
	DEFINE_ACTIVITY(ACT_FLY_RIGHT),
	DEFINE_ACTIVITY(ACT_DETECT_SCENT),
	DEFINE_ACTIVITY(ACT_SNIFF),
	DEFINE_ACTIVITY(ACT_BITE),
	DEFINE_ACTIVITY(ACT_THREAT_DISPLAY),
	DEFINE_ACTIVITY(ACT_FEAR_DISPLAY),
	DEFINE_ACTIVITY(ACT_EXCITED),
	DEFINE_ACTIVITY(ACT_SPECIAL_ATTACK1),
	DEFINE_ACTIVITY(ACT_SPECIAL_ATTACK2),
	DEFINE_ACTIVITY(ACT_COMBAT_IDLE),
	DEFINE_ACTIVITY(ACT_WALK_SCARED),
	DEFINE_ACTIVITY(ACT_RUN_SCARED),
	DEFINE_ACTIVITY(ACT_VICTORY_DANCE),
	DEFINE_ACTIVITY(ACT_DIE_HEADSHOT),
	DEFINE_ACTIVITY(ACT_DIE_CHESTSHOT),
	DEFINE_ACTIVITY(ACT_DIE_GUTSHOT),
	DEFINE_ACTIVITY(ACT_DIE_BACKSHOT),
	DEFINE_ACTIVITY(ACT_FLINCH_HEAD),
	DEFINE_ACTIVITY(ACT_FLINCH_CHEST),
	DEFINE_ACTIVITY(ACT_FLINCH_STOMACH),
	DEFINE_ACTIVITY(ACT_FLINCH_LEFTARM),
	DEFINE_ACTIVITY(ACT_FLINCH_RIGHTARM),
	DEFINE_ACTIVITY(ACT_FLINCH_LEFTLEG),
	DEFINE_ACTIVITY(ACT_FLINCH_RIGHTLEG),
	DEFINE_ACTIVITY(ACT_UNUSED13),
	DEFINE_ACTIVITY(ACT_UNUSED14),
	DEFINE_ACTIVITY(ACT_UNUSED15),
	DEFINE_ACTIVITY(ACT_UNUSED16),
	DEFINE_ACTIVITY(ACT_UNUSED5),
	DEFINE_ACTIVITY(ACT_UNUSED6),
	DEFINE_ACTIVITY(ACT_UNUSED7),
	DEFINE_ACTIVITY(ACT_UNUSED8),
	DEFINE_ACTIVITY(ACT_UNUSED9),
	DEFINE_ACTIVITY(ACT_FOCUS),
	DEFINE_ACTIVITY(ACT_USE_MEDKIT),
	DEFINE_ACTIVITY(ACT_DODGE_LEFT),
	DEFINE_ACTIVITY(ACT_DODGE_RIGHT),
	DEFINE_ACTIVITY(ACT_RUN_BERSERK),
	DEFINE_ACTIVITY(ACT_UNUSED10),
	DEFINE_ACTIVITY(ACT_UNUSED11),
	DEFINE_ACTIVITY(ACT_UNUSED12),
	DEFINE_ACTIVITY(ACT_FLINCH_HEAD_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_CHEST_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_STOMACH_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_LEFTARM_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_RIGHTARM_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_LEFTLEG_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_RIGHTLEG_HEAVY),
	DEFINE_ACTIVITY(ACT_FLINCH_HEAVY),
	DEFINE_ACTIVITY(ACT_BLOWBACK_FLY),
	DEFINE_ACTIVITY(ACT_BLOWBACK_LAND_FLAT),
	DEFINE_ACTIVITY(ACT_BLOWBACK_LAND_FLAT_BACK),
	DEFINE_ACTIVITY(ACT_BLOWBACK_LAND_SEATED),
	DEFINE_ACTIVITY(ACT_BLOWBACK_LAND_STOMACH),
	0, ""
};

//=============================================
// @brief
//
//=============================================
bool Activity_CheckActivityMapConsinstency( pfnCon_Printf_t pfnCon_Printf )
{
	// Check concinstency on activity mappings
	Uint32 activityMapSize = sizeof(ACTIVITYMAP);
	Uint32 mapSize = activityMapSize / sizeof(activity_mapping_t);
	mapSize -= 1; // do not count last empty one

	if (mapSize != NB_ACTIVITIES)
	{
		pfnCon_Printf("%s - ACTIVITYMAP has inconsistent size(%d expected, got %d instead)\n",
			__FUNCTION__, NB_ACTIVITIES, mapSize);
		return false;
	}

	bool failedConsistencyCheck = false;
	for (Int32 i = 0; i < NB_ACTIVITIES; i++)
	{
		if (ACTIVITYMAP[i].type != i)
		{
			pfnCon_Printf("%s - Inconsistent activity mappings defined, type '%s' expected to have index %d, has %d instead.\n",
				__FUNCTION__, ACTIVITYMAP[i].name, i, ACTIVITYMAP[i].type);

			failedConsistencyCheck = true;
		}
	}

	return failedConsistencyCheck ? false : true;
}