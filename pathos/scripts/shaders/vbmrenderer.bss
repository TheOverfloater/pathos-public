$global_determinator shadertype 0 17
$global_determinator ao 0 1
$global_determinator bumpmapping 0 1
$global_determinator numdlights 0 4
$global_determinator dlight0_shadow 0 1
$global_determinator dlight1_shadow 0 1
$global_determinator dlight2_shadow 0 1
$global_determinator dlight3_shadow 0 1
$global_determinator use_ubo 0 1
$global_determinator blendmultipass 0 2
$shader_vertex 
$determinator chrome 0 1
$determinator flex 0 1
$begin

$branch use_ubo == 1
$begin
#version 330
$end
$branch use_ubo == 0
$begin
#version 130
$end

$branch use_ubo == 0
$begin
	uniform mat4 projection;
	uniform mat4 modelview;
	uniform mat4 normalmatrix;
$end
$branch use_ubo == 1
$begin
layout (std140) uniform vs_matrices
{
	mat4 projection;
	mat4 modelview;
	mat4 normalmatrix;
};
$end

uniform mat4 dlight_0_matrix;
uniform mat4 dlight_1_matrix;
uniform mat4 dlight_2_matrix;
uniform mat4 dlight_3_matrix;
$branch use_ubo == 1
$begin
layout (std140) uniform bonematrices
{
	vec4 bones[96];
};
$end

$branch use_ubo == 0
$begin
uniform vec4 bones[96];
$end

uniform vec3 v_origin;
uniform vec3 v_right;

uniform vec4 causticsm1;
uniform vec4 causticsm2;

uniform vec2 scroll;

$branch flex == 1
$begin
uniform sampler2D flextexture;
uniform float flextexture_size;
$end

in vec3 in_position;
in vec3 in_tangent;
in vec3 in_normal;
in vec2 in_texcoord1;
in vec2 in_texcoord2;
in vec4 in_boneindexes;
in vec4 in_boneweights;
in vec2 in_flexcoord;

out vec3 ps_vertexpos;
out vec3 ps_tangent;
out vec3 ps_binormal;
out vec3 ps_normal;
out vec2 ps_texcoord1;
out vec2 ps_texcoord2;
out vec4 ps_dlight_0_vertexcoord;
out vec4 ps_dlight_1_vertexcoord;
out vec4 ps_dlight_2_vertexcoord;
out vec4 ps_dlight_3_vertexcoord;

vec3 TransformVectorByBone( vec3 vin, int boneindex, float weight )
{
	vec3 tmp;
	tmp[0] = dot(vin, bones[boneindex].xyz)+bones[boneindex].w;
	tmp[1] = dot(vin, bones[boneindex+1].xyz)+bones[boneindex+1].w;
	tmp[2] = dot(vin, bones[boneindex+2].xyz)+bones[boneindex+2].w;
	
	return tmp*weight;
}

vec3 RotateVectorByBone( vec3 vin, int boneindex, float weight )
{
	vec3 tmp;
	tmp[0] = dot(vin, bones[boneindex].xyz);
	tmp[1] = dot(vin, bones[boneindex+1].xyz);
	tmp[2] = dot(vin, bones[boneindex+2].xyz);
	
	return tmp*weight;
}

void main()
{
	int boneindex1 = int(in_boneindexes.x);
	int boneindex2 = int(in_boneindexes.y);
	int boneindex3 = int(in_boneindexes.z);
	int boneindex4 = int(in_boneindexes.w);
	
	vec3 vert_origin = in_position;
	vec3 vert_normal = in_normal;
	
	$branch flex == 1
	$begin
		vert_origin = vert_origin + textureLod(flextexture, in_flexcoord, 0.0).xyz;
		
		vec2 texcoord_normal = vec2(in_flexcoord.x + 1.0/flextexture_size, in_flexcoord.y);
		vert_normal = normalize(vert_normal + textureLod(flextexture, texcoord_normal, 0.0).xyz);
	$end
	
	vec3 trans_origin;
	trans_origin = TransformVectorByBone( vert_origin, boneindex1, in_boneweights.x );
	trans_origin += TransformVectorByBone( vert_origin, boneindex2, in_boneweights.y );
	trans_origin += TransformVectorByBone( vert_origin, boneindex3, in_boneweights.z );
	trans_origin += TransformVectorByBone( vert_origin, boneindex4, in_boneweights.w );
	
	vec3 trans_normal;
	trans_normal = RotateVectorByBone( vert_normal, boneindex1, in_boneweights.x );
	trans_normal += RotateVectorByBone( vert_normal, boneindex2, in_boneweights.y );
	trans_normal += RotateVectorByBone( vert_normal, boneindex3, in_boneweights.z );
	trans_normal += RotateVectorByBone( vert_normal, boneindex4, in_boneweights.w );		
	
	vec3 trans_tangent;
	vec3 trans_binormal;
	$branch bumpmapping == 1
	$begin
		trans_tangent = RotateVectorByBone( in_tangent, boneindex1, in_boneweights.x );
		trans_tangent += RotateVectorByBone( in_tangent, boneindex2, in_boneweights.y );
		trans_tangent += RotateVectorByBone( in_tangent, boneindex3, in_boneweights.z );
		trans_tangent += RotateVectorByBone( in_tangent, boneindex4, in_boneweights.w );	
		ps_tangent = (normalmatrix*vec4(trans_tangent, 0.0)).xyz;
		
		trans_binormal = cross(trans_normal, trans_tangent);
		ps_binormal = (normalmatrix*vec4(trans_binormal, 0.0)).xyz;
	$end
	
	vec4 position = vec4(trans_origin, 1.0)*modelview;

	ps_vertexpos = position.xyz;
	ps_normal = (normalmatrix*vec4(trans_normal, 0.0)).xyz;
	
	$branch shadertype == 0 || shadertype == 1 || shadertype == 2 || shadertype == 3 || shadertype == 5 || shadertype == 6 || shadertype == 4 || shadertype == 10 || shadertype == 12 || shadertype == 13 || shadertype == 14 || shadertype == 15 || shadertype == 16 || shadertype == 17 || blendmultipass >= 1
	$begin
		ps_texcoord1 = in_texcoord1 + scroll;
	$end
	
	$branch shadertype == 17 || shadertype == 16
	$begin
		ps_texcoord2 = in_texcoord2;
	$end
	
	$branch shadertype == 3
	$begin
		$branch numdlights >= 1  && dlight0_shadow == 1
		$begin
			ps_dlight_0_vertexcoord = dlight_0_matrix*vec4(trans_origin, 1.0);
		$end
		$branch numdlights >= 2  && dlight1_shadow == 1
		$begin
			ps_dlight_1_vertexcoord = dlight_1_matrix*vec4(trans_origin, 1.0);
		$end
		$branch numdlights >= 3  && dlight2_shadow == 1
		$begin
			ps_dlight_2_vertexcoord = dlight_2_matrix*vec4(trans_origin, 1.0);
		$end
		$branch numdlights >= 4  && dlight3_shadow == 1
		$begin
			ps_dlight_3_vertexcoord = dlight_3_matrix*vec4(trans_origin, 1.0);
		$end
	$end
	
	$branch shadertype == 5
	$begin
		$branch numdlights >= 1
		$begin
			ps_dlight_0_vertexcoord = dlight_0_matrix*position;
		$end
		$branch numdlights >= 2
		$begin
			ps_dlight_1_vertexcoord = dlight_1_matrix*position;
		$end
		$branch numdlights >= 3
		$begin
			ps_dlight_2_vertexcoord = dlight_2_matrix*position;
		$end
		$branch numdlights >= 4
		$begin
			ps_dlight_3_vertexcoord = dlight_3_matrix*position;
		$end
	$end
	
	$branch shadertype == 7
	$begin
		ps_texcoord1.x = in_position[0]*causticsm1[0]+in_position[1]*causticsm1[1]+in_position[2]*causticsm1[2]+causticsm1[3];
		ps_texcoord1.y = in_position[0]*causticsm2[0]+in_position[1]*causticsm2[1]+in_position[2]*causticsm2[2]+causticsm2[3];
	$end
	
	$branch chrome == 1
	$begin
		vec3 chromeup, chromeright, tmp;
		tmp = v_origin * -1;
		tmp += trans_origin;

		tmp = normalize(tmp);
		chromeup = cross(tmp, v_right);
		chromeup = normalize(chromeup);

		chromeright = cross(tmp, chromeup);
		chromeright = normalize(chromeright);

		// This is adding 0.5 only and not dividing by 2 because eye glint looks better this way
		float n = dot(trans_normal, chromeright);
		ps_texcoord1.x = (n*0.5) + 0.5;

		n = dot(trans_normal, chromeup);
		ps_texcoord1.y = (n*0.5) + 0.5;
	$end

	gl_Position = position*projection;
}
$end
$shader_fragment 
$determinator num_lights 0 6
$determinator alphatest 0 2
$determinator specular 0 1
$determinator luminance 0 1
$invalid_state 2 chrome 1 1 shadertype 2 2
$invalid_state 2 chrome 1 1 shadertype 4 4
$invalid_state 2 chrome 1 1 shadertype 6 11
$invalid_state 2 chrome 1 1 shadertype 13 17
$invalid_state 2 num_lights 1 6 shadertype 3 14
$invalid_state 2 num_lights 1 6 shadertype 16 17
$invalid_state 2 alphatest 1 2 shadertype 3 11
$invalid_state 2 alphatest 1 2 shadertype 13 13
$invalid_state 2 alphatest 1 2 shadertype 15 15
$invalid_state 2 alphatest 1 2 chrome 1 1
$invalid_state 2 specular 1 1 shadertype 7 12
$invalid_state 2 specular 1 1 shadertype 14 14
$invalid_state 2 specular 1 1 shadertype 16 17
$invalid_state 2 specular 0 0 shadertype 15 15
$invalid_state 2 luminance 1 1 shadertype 3 17
$invalid_state 2 bumpmapping 1 1 shadertype 7 14
$invalid_state 2 bumpmapping 1 1 shadertype 16 17
$invalid_state 2 numdlights 1 4 shadertype 0 2
$invalid_state 2 numdlights 1 4 shadertype 4 4
$invalid_state 2 numdlights 1 4 shadertype 6 17
$invalid_state 2 dlight0_shadow 1 1 numdlights 0 0
$invalid_state 2 dlight1_shadow 1 1 numdlights 0 1
$invalid_state 2 dlight2_shadow 1 1 numdlights 0 2
$invalid_state 2 dlight3_shadow 1 1 numdlights 0 3
$invalid_state 2 numdlights 1 4 num_lights 1 6
$invalid_state 2 numdlights 1 4 alphatest 1 1
$invalid_state 1 shadertype 4 4
$invalid_state 1 shadertype 6 6
$invalid_state 2 ao 1 1 shadertype 7 12
$invalid_state 2 ao 1 1 shadertype 14 14
$invalid_state 2 ao 1 1 shadertype 16 17
$invalid_state 2 blendmultipass 1 2 num_lights 1 6
$invalid_state 2 blendmultipass 1 2 shadertype 0 2
$invalid_state 2 blendmultipass 1 2 shadertype 4 4
$invalid_state 2 blendmultipass 1 2 shadertype 6 6
$invalid_state 2 blendmultipass 1 2 shadertype 8 22
$invalid_state 2 blendmultipass 1 2 ao 1 1
$invalid_state 2 blendmultipass 1 2 luminance 1 1
$invalid_state 2 blendmultipass 1 2 alphatest 1 2
$invalid_state 1 use_ubo 1 1

$begin
$branch use_ubo == 1
$begin
#version 330
$end
$branch use_ubo == 0
$begin
#version 130
$end
#extension GL_ARB_texture_rectangle : enable

uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2DRect rectangle;

uniform vec3 skylight_ambient;
uniform vec3 skylight_diffuse;
uniform vec3 skylight_dir;

uniform float light_radius;

uniform vec3 fogcolor;
uniform vec2 fogparams;

$branch specular == 1
$begin
uniform sampler2D spectexture;
$end

$branch luminance == 1
$begin
uniform sampler2D lumtexture;
$end

uniform sampler2D normalmap;

$branch ao == 1
$begin
uniform sampler2D aomaptex;
$end

uniform vec4 color;

uniform float phong_exponent;
uniform float specfactor;
uniform float caust_interp;

uniform float scope_scale;
uniform vec2 scope_scrsize;

$branch use_ubo == 0
$begin
	uniform vec3 lights_0_origin;
	uniform vec3 lights_0_color;
	uniform float lights_0_radius;

	uniform vec3 lights_1_origin;
	uniform vec3 lights_1_color;
	uniform float lights_1_radius;

	uniform vec3 lights_2_origin;
	uniform vec3 lights_2_color;
	uniform float lights_2_radius;

	uniform vec3 lights_3_origin;
	uniform vec3 lights_3_color;
	uniform float lights_3_radius;

	uniform vec3 lights_4_origin;
	uniform vec3 lights_4_color;
	uniform float lights_4_radius;

	uniform vec3 lights_5_origin;
	uniform vec3 lights_5_color;
	uniform float lights_5_radius;
$end
$branch use_ubo == 1
$begin
layout (std140) uniform modellights
{
	vec4 lights_0_origin;
	vec4 lights_0_color;
	vec4 lights_0_radius;

	vec4 lights_1_origin;
	vec4 lights_1_color;
	vec4 lights_1_radius;

	vec4 lights_2_origin;
	vec4 lights_2_color;
	vec4 lights_2_radius;

	vec4 lights_3_origin;
	vec4 lights_3_color;
	vec4 lights_3_radius;

	vec4 lights_4_origin;
	vec4 lights_4_color;
	vec4 lights_4_radius;

	vec4 lights_5_origin;
	vec4 lights_5_color;
	vec4 lights_5_radius;
};
$end

$branch numdlights >= 1
$begin
uniform vec3 dlight_0_origin;
uniform float dlight_0_radius;
uniform vec4 dlight_0_color;
	$branch shadertype == 5
	$begin
	uniform sampler2D dlight_0_projtexture;
	uniform float dlight_0_cone_size;
	uniform vec3 dlight_0_spotdirection;
	$end
	
	$branch dlight0_shadow == 1
	$begin
		$branch shadertype == 3
		$begin
			uniform samplerCube dlight_0_cubemap;
		$end
		$branch shadertype == 5
		$begin
			uniform sampler2D dlight_0_shadowmap;
		$end
	$end
$end

$branch numdlights >= 2
$begin
uniform vec3 dlight_1_origin;
uniform float dlight_1_radius;
uniform vec4 dlight_1_color;
	$branch shadertype == 5
	$begin
	uniform sampler2D dlight_1_projtexture;
	uniform float dlight_1_cone_size;
	uniform vec3 dlight_1_spotdirection;
	$end
	
	$branch dlight1_shadow == 1
	$begin
		$branch shadertype == 3
		$begin
			uniform samplerCube dlight_1_cubemap;
		$end
		$branch shadertype == 5
		$begin
			uniform sampler2D dlight_1_shadowmap;
		$end
	$end
$end

$branch numdlights >= 2
$begin
uniform vec3 dlight_2_origin;
uniform float dlight_2_radius;
uniform vec4 dlight_2_color;
	$branch shadertype == 5
	$begin
	uniform sampler2D dlight_2_projtexture;
	uniform float dlight_2_cone_size;
	uniform vec3 dlight_2_spotdirection;
	$end
	
	$branch dlight2_shadow == 1
	$begin
		$branch shadertype == 3
		$begin
			uniform samplerCube dlight_2_cubemap;
		$end
		$branch shadertype == 5
		$begin
			uniform sampler2D dlight_2_shadowmap;
		$end
	$end
$end

$branch numdlights >= 3
$begin
uniform vec3 dlight_3_origin;
uniform float dlight_3_radius;
uniform vec4 dlight_3_color;
	$branch shadertype == 5
	$begin
	uniform sampler2D dlight_3_projtexture;
	uniform float dlight_3_cone_size;
	uniform vec3 dlight_3_spotdirection;
	$end
	
	$branch dlight3_shadow == 1
	$begin
		$branch shadertype == 3
		$begin
			uniform samplerCube dlight_3_cubemap;
		$end
		$branch shadertype == 5
		$begin
			uniform sampler2D dlight_3_shadowmap;
		$end
	$end
$end

in vec3 ps_vertexpos;
in vec3 ps_tangent;
in vec3 ps_binormal;
in vec3 ps_normal;
in vec2 ps_texcoord1;
in vec2 ps_texcoord2;
in vec4 ps_dlight_0_vertexcoord;
in vec4 ps_dlight_1_vertexcoord;
in vec4 ps_dlight_2_vertexcoord;
in vec4 ps_dlight_3_vertexcoord;

out vec4 oColor;

#define M_PI 3.14159265358979323846264338327950288

float CalcShininess( vec3 v_dir, vec3 v_normal, vec3 l_dir )
{
$branch bumpmapping == 1
$begin
	vec3 halfVec = normalize(l_dir - v_dir);
	return max(dot(halfVec, v_normal), 0.0);
$end
$branch bumpmapping == 0
$begin
	return 1.0;
$end
}

float LinearStep(float in1, float in2, float pmax)  
{  
	float value = (pmax-in1)/(in2-in1);
	return clamp(value, 0.0, 1.0);
}

float ReduceLightBleeding(float p_max, float Amount)  
{    
	return LinearStep(Amount, 1, p_max);  
}

float DepthTestCube( float depthcoord, samplerCube shadowmap, vec3 coord )
{
	vec4 momments = texture(shadowmap, coord);
	momments.xy = momments.xy+momments.zw/32;

	float diff = depthcoord-momments.x;
	float sgn = max(sign(diff), 0);

	float variance = momments.y-(momments.x*momments.x);
	variance = max(variance, 0.00005);
	
	float d = depthcoord-momments.x;
	float p_max = variance/(variance+d*d);
	return p_max*sgn+(1.0-sgn);
}

float DepthTestProj( float depthcoord, sampler2D shadowmap, vec4 coord )
{
	vec4 momments = textureProj(shadowmap, coord);
	momments.xy = momments.xy+momments.zw/32;

	float diff = depthcoord-momments.x;
	float sgn = max(sign(diff), 0);

	float variance = momments.y-(momments.x*momments.x);
	variance = max(variance, 0.00005);
	
	float d = depthcoord-momments.x;
	float p_max = variance/(variance+d*d);
	return p_max*sgn+(1.0-sgn);
}

float CalcSpecular( vec3 v_origin, vec3 v_normal, vec3 lightDir, float specularStrength )
{
	// Eye vector (towards the camera)
	// All coordinates are in eye space
	vec3 eyeVec = normalize( -v_origin );
	
	// Direction in which the triangle reflects the light
	vec3 reflectVec = reflect( lightDir, v_normal );
	
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( eyeVec, reflectVec ), 0, 1 );	
	
	// Currently specular color is light color times two
	return specfactor * pow( cosAlpha, phong_exponent ) * specularStrength;
}

vec4 AddModelLight( vec3 l_origin, vec3 l_color, float l_radius, vec3 v_origin, vec3 v_normal, float specularStrength )
{
	// Inverse squared radius
	float rad = l_radius * l_radius;
	vec3 dir = l_origin - v_origin;

	float dist = dot(dir, dir);
	//float attn = rad / (dist * sqrt(dist));
	float attn = ((dist/rad)-1)*-1;
	
	attn = clamp(attn, 0.0, 1.0);
	dir = normalize(dir);
	float dp = dot(dir, v_normal);
	
	vec4 outColor;
	outColor.xyz = l_color*attn*max(dp, 0);
	
	$branch specular == 1
	$begin
		// Add specular if any
		float shineFactor = CalcShininess(normalize(v_origin), v_normal, dir);
		outColor.w = CalcSpecular(v_origin, v_normal, -dir, specularStrength * shineFactor) * attn * max(dp, 0);
	$end
	
	return outColor;
}

vec4 AddPointLight( float l_radius, vec3 l_origin, vec3 l_color, vec3 v_origin, vec4 v_coord, vec3 v_normal, float specularStrength )
{
	// Inverse squared radius
	float rad = l_radius * l_radius;
	vec3 dir = l_origin - v_origin;
	
	float dist = dot(dir, dir);
	float attn = (dist/rad-1)*-1;
	
	dir = normalize(dir);
	attn = clamp(attn, 0.0, 1.0);
	
	$branch blendmultipass == 0
	$begin
		float dp = dot(dir, v_normal);
	$end
	$branch blendmultipass >= 1
	$begin
		float dp = 1.0;
	$end
	
	attn = max(dp, 0)*attn;
	vec4 outColor;
	outColor.xyz = attn*l_color;
	
	$branch specular == 1
	$begin
		// Add specular if any
		float shineFactor = CalcShininess(normalize(v_origin), v_normal, dir) * 2;
		outColor.w = CalcSpecular(v_origin, v_normal, -dir, specularStrength * shineFactor) * attn;	
	$end
	
	return outColor;
}

float GetPointLightShadowing( float l_radius, vec4 v_coord, samplerCube l_shadowmap )
{
	float fldistance = clamp((length(v_coord.xyz)/l_radius), 0.0, 1.0);
	float flresult = DepthTestCube(fldistance, l_shadowmap, normalize(v_coord.xyz));
	return ReduceLightBleeding(flresult, 0.4);
}

vec4 AddProjLight( float l_radius, vec3 l_origin, vec3 l_color, vec3 v_origin, vec4 v_coord, vec3 v_normal, sampler2D l_texture, float specularStrength, float l_cone_size, vec3 l_spotdirection )
{
	float rad = l_radius*l_radius;
	vec3 dir = l_origin-v_origin;
	float dist = dot(dir, dir);
	float attn = (dist/rad-1)*-1;
	attn = clamp(attn, 0.0, 1.0);
	
	dir = normalize(dir);
	
	$branch blendmultipass == 0
	$begin
		float dp = max(dot(dir, v_normal), 0);
	$end
	$branch blendmultipass >= 1
	$begin
		float dp = 1.0;
	$end
	
	vec4 texclamp = max(v_coord, 0);
	vec4 texColor = textureProj(l_texture, texclamp);
	
	float spotcos = cos((l_cone_size*2)*0.3*(M_PI*2/360));
	
	vec3 spotdirection = normalize(l_spotdirection);
	float spotatten = -dot(spotdirection, dir);
	
	spotatten = max(spotatten, spotcos);
	float spotfactor = (spotatten - spotcos)/(1.0 - spotcos);
	
	vec4 outColor;
	outColor.xyz = attn * texColor.xyz * l_color * dp * spotfactor;
	
	$branch specular == 1
	$begin
		// Add specular if any
		float lightStrength = ((texColor.x + texColor.y + texColor.z) / 3.0f)*2;
		float shineFactor = CalcShininess(normalize(v_origin), v_normal, dir);
		outColor.w = CalcSpecular(v_origin, v_normal, -dir, specularStrength * shineFactor) * attn * dp * lightStrength * spotfactor;
	$end
	
	return outColor;
}

float GetProjLightShadowing( float l_radius, vec3 l_origin, vec3 v_origin, vec4 v_coord, sampler2D l_shadowmap )
{
	vec4 texclamp = max(v_coord, 0);
	float fldistance = clamp((length(l_origin-v_origin)/l_radius), 0.0, 1.0);
	float flresult = DepthTestProj(fldistance, l_shadowmap, texclamp);
	return ReduceLightBleeding(flresult, 0.4);
}

vec4 AddBaseLight( vec3 s_lightdir, vec3 s_ambient, vec3 s_diffuse, vec3 v_normal, vec3 v_origin, float specularStrength )
{
	float fldot = -dot(s_lightdir, v_normal);
	
	vec4 outColor;
	outColor.xyz = s_ambient+fldot*s_diffuse;
	
	$branch specular == 1
	$begin
		// Use basic specular as it looks better with the base lighting
		outColor.w = CalcSpecular(v_origin, v_normal, s_lightdir, specularStrength);
	$end
	
	return outColor;
}

vec3 AddDiffuseLight ( vec3 colorIn1, vec3 colorIn2 )
{
	vec3 outValue = colorIn1;
	$branch shadertype != 15
	$begin
		outValue += colorIn2;
	$end

	return outValue;
}

vec3 AddDiffuseDynamicLight ( vec3 colorIn1, vec3 colorIn2 )
{
	vec3 outValue = colorIn1;
	$branch specular == 0
	$begin
		outValue += colorIn2;
	$end

	return outValue;
}

vec3 AddSpecularLight ( vec3 colorIn1, float specularStrength, vec3 colorIn2 )
{
	vec3 outValue = colorIn1;
	$branch specular == 1
	$begin
		outValue += colorIn2 * specularStrength;
	$end

	return outValue;
}

vec4 EncodeDepth( vec3 v_origin, float l_radius )
{
	float depth = length(v_origin);
	depth = clamp((depth/l_radius), 0.0, 1.0);

	vec2 momments = vec2(depth, depth*depth);
	float dx = dFdx(depth);
	float dy = dFdy(depth);
	momments.y += 0.25*(dx*dx+dy*dy);

	vec2 fracval = fract(momments*32);

	vec4 finalColor;
	finalColor.x = momments.x-(fracval.x/32);
	finalColor.y = momments.y-(fracval.y/32);
	finalColor.zw = fracval;
	
	return finalColor;
}

float SplineFraction( float value, float scale )
{
	float valueSquared;

	value = scale * value;
	valueSquared = value * value;

	// Nice little ease-in, ease-out spline-like curve
	return 3 * valueSquared - 2 * valueSquared * value;
}

float CalcFogFactor( vec3 v_origin, vec2 f_params )
{
	float fp_fogcoord = length(v_origin);
	float fp_fogfactor = (f_params.x - fp_fogcoord)*f_params.y;
	
	return 1.0-SplineFraction(clamp(fp_fogfactor, 0.0, 1.0), 1.0);
}

vec3 GetNormal( vec2 texcoord, sampler2D normalmap, vec3 v_normal, mat3 tbnMatrix )
{
$branch bumpmapping == 0
$begin
	return v_normal;
$end
$branch bumpmapping == 1
$begin
	vec3 out_normal = (2.0 * texture2D (normalmap, texcoord).xyz) - 1.0;
	return normalize(tbnMatrix * out_normal);
$end
}

void main()
{
	mat3 tbnMatrix;
	float specularFactor = 0.0;
	vec4 specularColor = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 finalColor = vec4(0.0, 0.0, 0.0, 1.0);
	
	// Add luminance of any
	$branch luminance == 1
	$begin
		finalColor.xyz += texture(lumtexture, ps_texcoord1).xyz;
	$end
	
	// Get the specular texture if needed
	$branch specular == 1
	$begin
		vec4 specTexture = texture(spectexture, ps_texcoord1);
		specularFactor = (specTexture.x + specTexture.y + specTexture.z) / 3.0;
	$end
	
	// Build the TBN matrix if required
	$branch bumpmapping == 1
	$begin
		tbnMatrix = mat3(ps_tangent, ps_binormal, ps_normal);
	$end
	$branch bumpmapping == 0
	$begin
		// Shut up compiler warnings
		tbnMatrix = mat3(vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0));
	$end
	
	// Normal depends on rendering type
	vec3 v_normal = GetNormal(ps_texcoord1, normalmap, ps_normal, tbnMatrix);
	
	// Base lighting
	vec4 lightColor;
	$branch shadertype == 0 || shadertype == 1 || shadertype == 2 || shadertype == 15
	$begin
		lightColor = AddBaseLight(skylight_dir, skylight_ambient, skylight_diffuse, v_normal, ps_vertexpos, specularFactor);
		
		$branch shadertype != 15
		$begin
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		$end
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, skylight_diffuse);
	$end
	
	// Elights
	$branch num_lights >= 1
	$begin
		$branch use_ubo == 1
		$begin
			vec3 mlight_origin = lights_0_origin.xyz;
			vec3 mlight_color = lights_0_color.xyz;
			float mlight_radius = lights_0_radius.x;
		$end
		$branch use_ubo == 0
		$begin
			vec3 mlight_origin = lights_0_origin;
			vec3 mlight_color = lights_0_color;
			float mlight_radius = lights_0_radius;
		$end
		
		lightColor = AddModelLight(mlight_origin, mlight_color, mlight_radius, ps_vertexpos, v_normal, specularFactor);
		
		// Add in the diffuse light
		finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, mlight_color);
	$end
	$branch num_lights >= 2
	$begin
		$branch use_ubo == 1
		$begin
			mlight_origin = lights_1_origin.xyz;
			mlight_color = lights_1_color.xyz;
			mlight_radius = lights_1_radius.x;
		$end
		$branch use_ubo == 0
		$begin
			mlight_origin = lights_1_origin;
			mlight_color = lights_1_color;
			mlight_radius = lights_1_radius;
		$end
		
		lightColor = AddModelLight(mlight_origin, mlight_color, mlight_radius, ps_vertexpos, v_normal, specularFactor);
		
		// Add in the diffuse light
		finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, mlight_color);
	$end
	$branch num_lights >= 3
	$begin
		$branch use_ubo == 1
		$begin
			mlight_origin = lights_2_origin.xyz;
			mlight_color = lights_2_color.xyz;
			mlight_radius = lights_2_radius.x;
		$end
		$branch use_ubo == 0
		$begin
			mlight_origin = lights_2_origin;
			mlight_color = lights_2_color;
			mlight_radius = lights_2_radius;
		$end
		
		lightColor = AddModelLight(mlight_origin, mlight_color, mlight_radius, ps_vertexpos, v_normal, specularFactor);
		
		// Add in the diffuse light
		finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, mlight_color);
	$end
	$branch num_lights >= 4
	$begin
		$branch use_ubo == 1
		$begin
			mlight_origin = lights_3_origin.xyz;
			mlight_color = lights_3_color.xyz;
			mlight_radius = lights_3_radius.x;
		$end
		$branch use_ubo == 0
		$begin
			mlight_origin = lights_3_origin;
			mlight_color = lights_3_color;
			mlight_radius = lights_3_radius;
		$end
		
		lightColor = AddModelLight(mlight_origin, mlight_color, mlight_radius, ps_vertexpos, v_normal, specularFactor);
		
		// Add in the diffuse light
		finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, mlight_color);
	$end
	$branch num_lights >= 5
	$begin
		$branch use_ubo == 1
		$begin
			mlight_origin = lights_4_origin.xyz;
			mlight_color = lights_4_color.xyz;
			mlight_radius = lights_4_radius.x;
		$end
		$branch use_ubo == 0
		$begin
			mlight_origin = lights_4_origin;
			mlight_color = lights_4_color;
			mlight_radius = lights_4_radius;
		$end
		
		lightColor = AddModelLight(mlight_origin, mlight_color, mlight_radius, ps_vertexpos, v_normal, specularFactor);
		
		// Add in the diffuse light
		finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, mlight_color);
	$end
	$branch num_lights == 6
	$begin
		$branch use_ubo == 1
		$begin
			mlight_origin = lights_5_origin.xyz;
			mlight_color = lights_5_color.xyz;
			mlight_radius = lights_5_radius.x;
		$end
		$branch use_ubo == 0
		$begin
			mlight_origin = lights_5_origin;
			mlight_color = lights_5_color;
			mlight_radius = lights_5_radius;
		$end
		
		lightColor = AddModelLight(mlight_origin, mlight_color, mlight_radius, ps_vertexpos, v_normal, specularFactor);
		
		// Add in the diffuse light
		finalColor.xyz = AddDiffuseLight(finalColor.xyz, lightColor.xyz);
		
		// Add to specular
		specularColor.xyz = AddSpecularLight(specularColor.xyz, lightColor.w, mlight_color);
	$end
	
	// Dynamic light passes
	$branch shadertype == 3
	$begin
		$branch numdlights >= 1
		$begin
			//
			// Light 1
			// 
			lightColor = AddPointLight(dlight_0_radius, dlight_0_origin, dlight_0_color.xyz, ps_vertexpos.xyz, ps_dlight_0_vertexcoord, v_normal, specularFactor);
			
			$branch dlight0_shadow == 1
			$begin
				lightColor *= GetPointLightShadowing(dlight_0_radius, ps_dlight_0_vertexcoord, dlight_0_cubemap);
			$end
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_0_color.xyz);
		$end
		$branch numdlights >= 2
		$begin
			//
			// Light 2
			// 
			lightColor = AddPointLight(dlight_1_radius, dlight_1_origin, dlight_1_color.xyz, ps_vertexpos.xyz, ps_dlight_1_vertexcoord, v_normal, specularFactor);
			
			$branch dlight1_shadow == 1
			$begin
				lightColor *= GetPointLightShadowing(dlight_1_radius, ps_dlight_1_vertexcoord, dlight_1_cubemap);
			$end
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_1_color.xyz);
		$end
		$branch numdlights >= 3
		$begin
			//
			// Light 3
			// 
			lightColor = AddPointLight(dlight_2_radius, dlight_2_origin, dlight_2_color.xyz, ps_vertexpos.xyz, ps_dlight_2_vertexcoord, v_normal, specularFactor);
			
			$branch dlight2_shadow == 1
			$begin
				lightColor *= GetPointLightShadowing(dlight_2_radius, ps_dlight_2_vertexcoord, dlight_2_cubemap);
			$end	
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_2_color.xyz);
		$end
		$branch numdlights >= 4
		$begin
			//
			// Light 4
			// 
			lightColor = AddPointLight(dlight_3_radius, dlight_3_origin, dlight_3_color.xyz, ps_vertexpos.xyz, ps_dlight_3_vertexcoord, v_normal, specularFactor);
			
			$branch dlight3_shadow == 1
			$begin
				lightColor *= GetPointLightShadowing(dlight_3_radius, ps_dlight_3_vertexcoord, dlight_3_cubemap);
			$end
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_3_color.xyz);
		$end
		
		$branch blendmultipass >= 1
		$begin
			vec4 textureColor = texture(texture0, ps_texcoord1);
			finalColor = finalColor * textureColor * color;
			
			$branch blendmultipass == 2
			$begin
				float fogfactor = CalcFogFactor( ps_vertexpos.xyz, fogparams );
				finalColor.xyz = mix(finalColor.xyz, fogcolor, fogfactor);
			$end
		$end
	$end
	$branch shadertype == 5
	$begin
		$branch numdlights >= 1
		$begin
			//
			// Light 1
			//
			lightColor = AddProjLight(dlight_0_radius, dlight_0_origin, dlight_0_color.xyz, ps_vertexpos.xyz, ps_dlight_0_vertexcoord, v_normal, dlight_0_projtexture, specularFactor, dlight_0_cone_size, dlight_0_spotdirection);
			
			$branch dlight0_shadow == 1
			$begin
				lightColor *= GetProjLightShadowing(dlight_0_radius, dlight_0_origin, ps_vertexpos.xyz, ps_dlight_0_vertexcoord, dlight_0_shadowmap);
			$end
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_0_color.xyz);
		$end
		$branch numdlights >= 2
		$begin
			//
			// Light 2
			//
			lightColor = AddProjLight(dlight_1_radius, dlight_1_origin, dlight_1_color.xyz, ps_vertexpos.xyz, ps_dlight_1_vertexcoord, v_normal, dlight_1_projtexture, specularFactor, dlight_1_cone_size, dlight_1_spotdirection);
			
			$branch dlight1_shadow == 1
			$begin
				lightColor *= GetProjLightShadowing(dlight_1_radius, dlight_1_origin, ps_vertexpos.xyz, ps_dlight_1_vertexcoord, dlight_1_shadowmap);
			$end			
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_1_color.xyz);
		$end
		$branch numdlights >= 3
		$begin
			//
			// Light 3
			//
			lightColor = AddProjLight(dlight_2_radius, dlight_2_origin, dlight_2_color.xyz, ps_vertexpos.xyz, ps_dlight_2_vertexcoord, v_normal, dlight_2_projtexture, specularFactor, dlight_2_cone_size, dlight_2_spotdirection);
			
			$branch dlight2_shadow == 1
			$begin
				lightColor *= GetProjLightShadowing(dlight_2_radius, dlight_2_origin, ps_vertexpos.xyz, ps_dlight_2_vertexcoord, dlight_2_shadowmap);
			$end			
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_2_color.xyz);
		$end
		$branch numdlights >= 4
		$begin
			//
			// Light 4
			//
			lightColor = AddProjLight(dlight_3_radius, dlight_3_origin, dlight_3_color.xyz, ps_vertexpos.xyz, ps_dlight_3_vertexcoord, v_normal, dlight_3_projtexture, specularFactor, dlight_3_cone_size, dlight_3_spotdirection);
			
			$branch dlight3_shadow == 1
			$begin
				lightColor *= GetProjLightShadowing(dlight_3_radius, dlight_3_origin, ps_vertexpos.xyz, ps_dlight_3_vertexcoord, dlight_3_shadowmap);
			$end				
			
			// Add in the diffuse light
			finalColor.xyz = AddDiffuseDynamicLight(finalColor.xyz, lightColor.xyz);
			
			// Add to specular
			finalColor.xyz = AddSpecularLight(finalColor.xyz, lightColor.w, dlight_3_color.xyz);
		$end
		
		$branch blendmultipass >= 1
		$begin
			vec4 textureColor = texture(texture0, ps_texcoord1);
			finalColor = finalColor * textureColor * color;
			
			$branch blendmultipass == 2
			$begin
				float fogfactor = CalcFogFactor( ps_vertexpos.xyz, fogparams );
				finalColor.xyz = mix(finalColor.xyz, fogcolor, fogfactor);
			$end
		$end
	$end
	
	$branch ao == 1 && shadertype != 3 && shadertype != 5
	$begin
		vec3 aocolor = texture(aomaptex, ps_texcoord1).xyz;
		finalColor.xyz *= aocolor;
		specularColor.xyz *= aocolor;
	$end	
	
	// Normal single pass rendering
	$branch shadertype == 0 || shadertype == 1
	$begin
		finalColor = clamp(finalColor, 0.0, 1.0); // To prevent multipass inconsistencies
		vec4 textureColor = texture(texture0, ps_texcoord1);
		finalColor = finalColor*textureColor + specularColor;
		finalColor.xyz *= 2;
		finalColor = finalColor*color;
	$end
	
	// Lighting without textures but with alpha
	$branch shadertype == 2
	$begin
		finalColor.w = texture(texture0, ps_texcoord1).w;
	$end
	
	// Caustics
	$branch shadertype == 7
	$begin
		vec4 caustics1 = texture2D(texture0, ps_texcoord1);
		vec4 caustics2 = texture2D(texture1, ps_texcoord1);
		
		finalColor = caustics1*(1.0 - caust_interp) + caustics2*caust_interp;
	$end
	
	// Solid color
	$branch shadertype == 8
	$begin
		finalColor = color;
	$end
	
	// VSM shadow encoding
	$branch shadertype == 9 || shadertype == 10
	$begin
		finalColor = EncodeDepth( ps_vertexpos, light_radius );
		
		$branch shadertype == 10
		$begin
			if(texture(texture0, ps_texcoord1).w < 0.5)
				discard;
		$end
	$end
	
	// Fog only with fog factor as alpha
	$branch shadertype == 11
	$begin
		finalColor.xyz = fogcolor.xyz;
		finalColor.w = CalcFogFactor( ps_vertexpos.xyz, fogparams );
	$end
	// Texture with no lighting
	$branch shadertype == 12
	$begin
		finalColor = texture(texture0, ps_texcoord1);	
	$end
	// Scope
	$branch shadertype == 13
	$begin
		float fldot = -dot(skylight_dir, ps_normal);
		finalColor.xyz += skylight_ambient+fldot*skylight_diffuse;

		vec2 texcoord;
		texcoord = ps_texcoord1 - 0.5;
		texcoord *= scope_scale;

		texcoord = texcoord + 0.5;
		texcoord.x = 1.0-texcoord.x;
		texcoord.y = 1.0-texcoord.y;
		
		texcoord.x *= scope_scrsize.x;
		texcoord.y *= scope_scrsize.y;

		vec4 texcolor = texture(texture0, ps_texcoord1);
		vec4 rectcolor = texture(rectangle, texcoord);
		
		finalColor = mix(rectcolor, texcolor*finalColor, texcolor.w);
	$end
	// Texture only and with fog
	$branch shadertype == 14
	$begin
		finalColor = texture(texture0, ps_texcoord1)*color;
	$end
	
	// Texture with alpha holes for decals
	$branch shadertype == 16 || shadertype == 17
	$begin
		finalColor = texture(texture0, ps_texcoord1);
		vec4 alphacolor = texture(texture1, ps_texcoord2);
		finalColor.a = finalColor.a*alphacolor.a;
	$end	
	
	// Fog calculations
	$branch shadertype == 14 || shadertype == 1 || shadertype == 17
	$begin
		float fogfactor = CalcFogFactor( ps_vertexpos.xyz, fogparams );
		finalColor.xyz = mix(finalColor.xyz, fogcolor, fogfactor);
	$end
	
	// Specular only
	$branch shadertype == 15
	$begin
		finalColor.xyz = specularColor.xyz * 2;
		finalColor.w = 1.0;
	$end	
	
	$branch alphatest == 1
	$begin
		if(finalColor.a < 0.5)
			discard;
	$end
	$branch alphatest == 2
	$begin
		finalColor.a = (finalColor.a - 0.5) / max(fwidth(finalColor.a), 0.0001) + 0.5;
	$end	
	
	oColor = finalColor;
}
$end